<source>
  @type  forward
  @id    input1
  port  24224
</source>

<source>
  @type tail
  path /var/log/containers/*.log
  pos_file /var/log/fluentd-containers.log.pos
  time_format %Y-%m-%dT%H:%M:%S.%NZ
  tag kubernetes.*
  format json
  read_from_head true
</source>

<match fluent.**>
  @type null
</match>

<match kubernetes.var.log.containers.**fluentd**.log>
  @type null
</match>

<match kubernetes.var.log.containers.**_kube-system_**>
  @type null
</match>

<filter kubernetes.**>
  @type kubernetes_metadata
</filter>

<filter kubernetes.**>
  @type record_transformer
  enable_ruby true # This is needed for nested field access (i.e. the kubernetes.container_name)
  <record>
    service ${record["kubernetes"]["container_name"]}
  </record>
</filter>

<filter docker.**, kubernetes.**>
  @type parser
  key_name log
  reserve_data true
  <parse>
    @type grok

      # Match with metadata
      <grok>
        pattern %{TIMESTAMP_ISO8601:time} %{LOGLEVEL:severity} %{DATA:message} (?<metadata>({.*}))
        time_key time
        time_type string
        time_format %iso8601
      </grok>

      # Match without metadata (and arbitrary whitespace)
      <grok>
        pattern %{TIMESTAMP_ISO8601:time}(?:\s*)%{LOGLEVEL:severity}(?:\s*)%{GREEDYDATA:message}
        time_key time
        time_type string
        time_format %iso8601
      </grok>

      # Match anything
      <grok>
        pattern %{GREEDYDATA:message}
      </grok>
    </parse>
</filter>

# Parse the metadata field as JSON so it becomes a proper nested document
# E.g. metadata: '{"foo":"bar"}' becomes metadata: { foo: 'bar' }
<filter docker.**, kubernetes.**>
  @type parser
  key_name metadata
  reserve_data true
  hash_value_field metadata
  <parse>
    @type json
  </parse>
</filter>

<filter docker.**, kubernetes.**>
  @type stdout
</filter>

<match docker.**, kubernetes.**>
  @type mongo

  database "#{ENV['MONGO_DATABASE']}"
  collection "#{ENV['MONGO_COLLECTION']}"

  host "#{ENV['MONGO_HOST']}"
  port "#{ENV['MONGO_PORT']}"

  user "#{ENV['MONGO_USERNAME']}"
  password "#{ENV['MONGO_PASSWORD']}"

  # This option enables the capped collection. This is
  # always recommended because MongoDB is not suited for
  # storing large amounts of historical data.
  capped
  capped_size 1024m

  <buffer>
    flush_interval 5s
  </buffer>

  <inject>
    time_key time
  </inject>
</match>
