// Code generated by jrpc. DO NOT EDIT.

package infrareddef

import (
	oops "github.com/jakewright/home-automation/libraries/go/oops"
)

// GetDeviceRequest is defined in the .def file
type GetDeviceRequest struct {
	DeviceId *string `json:"device_id,omitempty"`
}

// GetDeviceId returns the de-referenced value of DeviceId.
// If the field is nil, the function panics because device_id is marked as required.
func (m *GetDeviceRequest) GetDeviceId() (val string) {
	if m.DeviceId == nil {
		panic("device_id marked as required but was not set. This should have been caught by the validate function.")
	}

	return *m.DeviceId
}

// SetDeviceId sets the value of DeviceId
func (m *GetDeviceRequest) SetDeviceId(v string) *GetDeviceRequest {
	m.DeviceId = &v
	return m
}

// Validate returns an error if any of the fields have bad values
func (m *GetDeviceRequest) Validate() error {
	if m.DeviceId == nil {
		return oops.BadRequest("field 'device_id' is required")
	}
	return nil
}

// GetDeviceResponse is defined in the .def file
type GetDeviceResponse struct {
}

// Validate returns an error if any of the fields have bad values
func (m *GetDeviceResponse) Validate() error {
	return nil
}

// UpdateDeviceRequest is defined in the .def file
type UpdateDeviceRequest struct {
	DeviceId *string                `json:"device_id,omitempty"`
	State    map[string]interface{} `json:"state,omitempty"`
}

// GetDeviceId returns the de-referenced value of DeviceId.
// If the field is nil, the function panics because device_id is marked as required.
func (m *UpdateDeviceRequest) GetDeviceId() (val string) {
	if m.DeviceId == nil {
		panic("device_id marked as required but was not set. This should have been caught by the validate function.")
	}

	return *m.DeviceId
}

// SetDeviceId sets the value of DeviceId
func (m *UpdateDeviceRequest) SetDeviceId(v string) *UpdateDeviceRequest {
	m.DeviceId = &v
	return m
}

// GetState returns the de-referenced value of State.
// The second return value states whether the field was set.
func (m *UpdateDeviceRequest) GetState() (val map[string]interface{}, set bool) {
	if m.State == nil {
		return
	}

	return m.State, true
}

// SetState sets the value of State
func (m *UpdateDeviceRequest) SetState(v map[string]interface{}) *UpdateDeviceRequest {
	m.State = v
	return m
}

// Validate returns an error if any of the fields have bad values
func (m *UpdateDeviceRequest) Validate() error {
	if m.DeviceId == nil {
		return oops.BadRequest("field 'device_id' is required")
	}
	return nil
}

// UpdateDeviceResponse is defined in the .def file
type UpdateDeviceResponse struct {
}

// Validate returns an error if any of the fields have bad values
func (m *UpdateDeviceResponse) Validate() error {
	return nil
}
