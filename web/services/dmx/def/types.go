// Code generated by jrpc. DO NOT EDIT.

package dmxdef

import (
	def "github.com/jakewright/home-automation/libraries/go/device/def"
	oops "github.com/jakewright/home-automation/libraries/go/oops"
	util "github.com/jakewright/home-automation/libraries/go/util"
)

// MegaParProfileState is defined in the .def file
type MegaParProfileState struct {
	Power      *bool     `json:"power,omitempty"`
	Brightness *byte     `json:"brightness,omitempty"`
	Color      *util.RGB `json:"color,omitempty"`
	Strobe     *byte     `json:"strobe,omitempty"`
}

// GetPower returns the de-referenced value of Power.
// The second return value states whether the field was set.
func (m *MegaParProfileState) GetPower() (val bool, set bool) {
	if m.Power == nil {
		return
	}

	return *m.Power, true
}

// SetPower sets the value of Power
func (m *MegaParProfileState) SetPower(v bool) *MegaParProfileState {
	m.Power = &v
	return m
}

// GetBrightness returns the de-referenced value of Brightness.
// The second return value states whether the field was set.
func (m *MegaParProfileState) GetBrightness() (val byte, set bool) {
	if m.Brightness == nil {
		return
	}

	return *m.Brightness, true
}

// SetBrightness sets the value of Brightness
func (m *MegaParProfileState) SetBrightness(v byte) *MegaParProfileState {
	m.Brightness = &v
	return m
}

// GetColor returns the de-referenced value of Color.
// The second return value states whether the field was set.
func (m *MegaParProfileState) GetColor() (val util.RGB, set bool) {
	if m.Color == nil {
		return
	}

	return *m.Color, true
}

// SetColor sets the value of Color
func (m *MegaParProfileState) SetColor(v util.RGB) *MegaParProfileState {
	m.Color = &v
	return m
}

// GetStrobe returns the de-referenced value of Strobe.
// The second return value states whether the field was set.
func (m *MegaParProfileState) GetStrobe() (val byte, set bool) {
	if m.Strobe == nil {
		return
	}

	return *m.Strobe, true
}

// SetStrobe sets the value of Strobe
func (m *MegaParProfileState) SetStrobe(v byte) *MegaParProfileState {
	m.Strobe = &v
	return m
}

// Validate returns an error if any of the fields have bad values
func (m *MegaParProfileState) Validate() error {
	return nil
}

// GetMegaParProfileRequest is defined in the .def file
type GetMegaParProfileRequest struct {
	DeviceId *string `json:"device_id,omitempty"`
}

// GetDeviceId returns the de-referenced value of DeviceId.
// If the field is nil, the function panics because device_id is marked as required.
func (m *GetMegaParProfileRequest) GetDeviceId() (val string) {
	if m.DeviceId == nil {
		panic("device_id marked as required but was not set. This should have been caught by the validate function.")
	}

	return *m.DeviceId
}

// SetDeviceId sets the value of DeviceId
func (m *GetMegaParProfileRequest) SetDeviceId(v string) *GetMegaParProfileRequest {
	m.DeviceId = &v
	return m
}

// Validate returns an error if any of the fields have bad values
func (m *GetMegaParProfileRequest) Validate() error {
	if m.DeviceId == nil {
		return oops.BadRequest("field 'device_id' is required")
	}
	return nil
}

// UpdateMegaParProfileRequest is defined in the .def file
type UpdateMegaParProfileRequest struct {
	DeviceId *string              `json:"device_id,omitempty"`
	State    *MegaParProfileState `json:"state,omitempty"`
}

// GetDeviceId returns the de-referenced value of DeviceId.
// If the field is nil, the function panics because device_id is marked as required.
func (m *UpdateMegaParProfileRequest) GetDeviceId() (val string) {
	if m.DeviceId == nil {
		panic("device_id marked as required but was not set. This should have been caught by the validate function.")
	}

	return *m.DeviceId
}

// SetDeviceId sets the value of DeviceId
func (m *UpdateMegaParProfileRequest) SetDeviceId(v string) *UpdateMegaParProfileRequest {
	m.DeviceId = &v
	return m
}

// GetState returns the de-referenced value of State.
// The second return value states whether the field was set.
func (m *UpdateMegaParProfileRequest) GetState() (val MegaParProfileState, set bool) {
	if m.State == nil {
		return
	}

	return *m.State, true
}

// SetState sets the value of State
func (m *UpdateMegaParProfileRequest) SetState(v MegaParProfileState) *UpdateMegaParProfileRequest {
	m.State = &v
	return m
}

// Validate returns an error if any of the fields have bad values
func (m *UpdateMegaParProfileRequest) Validate() error {
	if m.DeviceId == nil {
		return oops.BadRequest("field 'device_id' is required")
	}
	if err := m.State.Validate(); err != nil {
		return err
	}

	return nil
}

// MegaParProfileResponse is defined in the .def file
type MegaParProfileResponse struct {
	Header     *def.Header              `json:"header,omitempty"`
	Properties map[string]*def.Property `json:"properties,omitempty"`
	State      *MegaParProfileState     `json:"state,omitempty"`
}

// GetHeader returns the de-referenced value of Header.
// The second return value states whether the field was set.
func (m *MegaParProfileResponse) GetHeader() (val def.Header, set bool) {
	if m.Header == nil {
		return
	}

	return *m.Header, true
}

// SetHeader sets the value of Header
func (m *MegaParProfileResponse) SetHeader(v def.Header) *MegaParProfileResponse {
	m.Header = &v
	return m
}

// GetProperties returns the de-referenced value of Properties.
// The second return value states whether the field was set.
func (m *MegaParProfileResponse) GetProperties() (val map[string]*def.Property, set bool) {
	if m.Properties == nil {
		return
	}

	return m.Properties, true
}

// SetProperties sets the value of Properties
func (m *MegaParProfileResponse) SetProperties(v map[string]*def.Property) *MegaParProfileResponse {
	m.Properties = v
	return m
}

// GetState returns the de-referenced value of State.
// The second return value states whether the field was set.
func (m *MegaParProfileResponse) GetState() (val MegaParProfileState, set bool) {
	if m.State == nil {
		return
	}

	return *m.State, true
}

// SetState sets the value of State
func (m *MegaParProfileResponse) SetState(v MegaParProfileState) *MegaParProfileResponse {
	m.State = &v
	return m
}

// Validate returns an error if any of the fields have bad values
func (m *MegaParProfileResponse) Validate() error {
	if err := m.Header.Validate(); err != nil {
		return err
	}

	if err := m.State.Validate(); err != nil {
		return err
	}

	return nil
}
