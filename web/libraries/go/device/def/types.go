// Code generated by jrpc. DO NOT EDIT.

package devicedef

import (
	oops "github.com/jakewright/home-automation/libraries/go/oops"
)

// Header is defined in the .def file
type Header struct {
	Id             *string                `json:"id,omitempty"`
	Name           *string                `json:"name,omitempty"`
	Type           *string                `json:"type,omitempty"`
	Kind           *string                `json:"kind,omitempty"`
	ControllerName *string                `json:"controller_name,omitempty"`
	Attributes     map[string]interface{} `json:"attributes,omitempty"`
	StateProviders []string               `json:"state_providers,omitempty"`
	RoomId         *string                `json:"room_id,omitempty"`
}

// GetId returns the de-referenced value of Id.
// If the field is nil, the function panics because id is marked as required.
func (m *Header) GetId() (val string) {
	if m.Id == nil {
		panic("id marked as required but was not set. This should have been caught by the validate function.")
	}

	return *m.Id
}

// SetId sets the value of Id
func (m *Header) SetId(v string) *Header {
	m.Id = &v
	return m
}

// GetName returns the de-referenced value of Name.
// If the field is nil, the function panics because name is marked as required.
func (m *Header) GetName() (val string) {
	if m.Name == nil {
		panic("name marked as required but was not set. This should have been caught by the validate function.")
	}

	return *m.Name
}

// SetName sets the value of Name
func (m *Header) SetName(v string) *Header {
	m.Name = &v
	return m
}

// GetType returns the de-referenced value of Type.
// If the field is nil, the function panics because type is marked as required.
func (m *Header) GetType() (val string) {
	if m.Type == nil {
		panic("type marked as required but was not set. This should have been caught by the validate function.")
	}

	return *m.Type
}

// SetType sets the value of Type
func (m *Header) SetType(v string) *Header {
	m.Type = &v
	return m
}

// GetKind returns the de-referenced value of Kind.
// If the field is nil, the function panics because kind is marked as required.
func (m *Header) GetKind() (val string) {
	if m.Kind == nil {
		panic("kind marked as required but was not set. This should have been caught by the validate function.")
	}

	return *m.Kind
}

// SetKind sets the value of Kind
func (m *Header) SetKind(v string) *Header {
	m.Kind = &v
	return m
}

// GetControllerName returns the de-referenced value of ControllerName.
// If the field is nil, the function panics because controller_name is marked as required.
func (m *Header) GetControllerName() (val string) {
	if m.ControllerName == nil {
		panic("controller_name marked as required but was not set. This should have been caught by the validate function.")
	}

	return *m.ControllerName
}

// SetControllerName sets the value of ControllerName
func (m *Header) SetControllerName(v string) *Header {
	m.ControllerName = &v
	return m
}

// GetAttributes returns the de-referenced value of Attributes.
// The second return value states whether the field was set.
func (m *Header) GetAttributes() (val map[string]interface{}, set bool) {
	if m.Attributes == nil {
		return
	}

	return m.Attributes, true
}

// SetAttributes sets the value of Attributes
func (m *Header) SetAttributes(v map[string]interface{}) *Header {
	m.Attributes = v
	return m
}

// GetStateProviders returns the de-referenced value of StateProviders.
// The second return value states whether the field was set.
func (m *Header) GetStateProviders() (val []string, set bool) {
	if m.StateProviders == nil {
		return
	}

	return m.StateProviders, true
}

// SetStateProviders sets the value of StateProviders
func (m *Header) SetStateProviders(v []string) *Header {
	m.StateProviders = v
	return m
}

// GetRoomId returns the de-referenced value of RoomId.
// The second return value states whether the field was set.
func (m *Header) GetRoomId() (val string, set bool) {
	if m.RoomId == nil {
		return
	}

	return *m.RoomId, true
}

// SetRoomId sets the value of RoomId
func (m *Header) SetRoomId(v string) *Header {
	m.RoomId = &v
	return m
}

// Validate returns an error if any of the fields have bad values
func (m *Header) Validate() error {
	if m.Id == nil {
		return oops.BadRequest("field 'id' is required")
	}
	if m.Name == nil {
		return oops.BadRequest("field 'name' is required")
	}
	if m.Type == nil {
		return oops.BadRequest("field 'type' is required")
	}
	if m.Kind == nil {
		return oops.BadRequest("field 'kind' is required")
	}
	if m.ControllerName == nil {
		return oops.BadRequest("field 'controller_name' is required")
	}
	return nil
}

// Property is defined in the .def file
type Property struct {
	Type          *string   `json:"type,omitempty"`
	Min           *float64  `json:"min,omitempty"`
	Max           *float64  `json:"max,omitempty"`
	Interpolation *string   `json:"interpolation,omitempty"`
	Options       []*Option `json:"options,omitempty"`
}

// GetType returns the de-referenced value of Type.
// If the field is nil, the function panics because type is marked as required.
func (m *Property) GetType() (val string) {
	if m.Type == nil {
		panic("type marked as required but was not set. This should have been caught by the validate function.")
	}

	return *m.Type
}

// SetType sets the value of Type
func (m *Property) SetType(v string) *Property {
	m.Type = &v
	return m
}

// GetMin returns the de-referenced value of Min.
// The second return value states whether the field was set.
func (m *Property) GetMin() (val float64, set bool) {
	if m.Min == nil {
		return
	}

	return *m.Min, true
}

// SetMin sets the value of Min
func (m *Property) SetMin(v float64) *Property {
	m.Min = &v
	return m
}

// GetMax returns the de-referenced value of Max.
// The second return value states whether the field was set.
func (m *Property) GetMax() (val float64, set bool) {
	if m.Max == nil {
		return
	}

	return *m.Max, true
}

// SetMax sets the value of Max
func (m *Property) SetMax(v float64) *Property {
	m.Max = &v
	return m
}

// GetInterpolation returns the de-referenced value of Interpolation.
// The second return value states whether the field was set.
func (m *Property) GetInterpolation() (val string, set bool) {
	if m.Interpolation == nil {
		return
	}

	return *m.Interpolation, true
}

// SetInterpolation sets the value of Interpolation
func (m *Property) SetInterpolation(v string) *Property {
	m.Interpolation = &v
	return m
}

// GetOptions returns the de-referenced value of Options.
// The second return value states whether the field was set.
func (m *Property) GetOptions() (val []*Option, set bool) {
	if m.Options == nil {
		return
	}

	return m.Options, true
}

// SetOptions sets the value of Options
func (m *Property) SetOptions(v []*Option) *Property {
	m.Options = v
	return m
}

// Validate returns an error if any of the fields have bad values
func (m *Property) Validate() error {
	if m.Type == nil {
		return oops.BadRequest("field 'type' is required")
	}
	if m.Options != nil {
		for _, r := range m.Options {
			if err := r.Validate(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Command is defined in the .def file
type Command struct {
	Args map[string]*Arg `json:"args,omitempty"`
}

// GetArgs returns the de-referenced value of Args.
// The second return value states whether the field was set.
func (m *Command) GetArgs() (val map[string]*Arg, set bool) {
	if m.Args == nil {
		return
	}

	return m.Args, true
}

// SetArgs sets the value of Args
func (m *Command) SetArgs(v map[string]*Arg) *Command {
	m.Args = v
	return m
}

// Validate returns an error if any of the fields have bad values
func (m *Command) Validate() error {
	return nil
}

// Arg is defined in the .def file
type Arg struct {
	Required *bool     `json:"required,omitempty"`
	Type     *string   `json:"type,omitempty"`
	Min      *float64  `json:"min,omitempty"`
	Max      *float64  `json:"max,omitempty"`
	Options  []*Option `json:"options,omitempty"`
}

// GetRequired returns the de-referenced value of Required.
// If the field is nil, the function panics because required is marked as required.
func (m *Arg) GetRequired() (val bool) {
	if m.Required == nil {
		panic("required marked as required but was not set. This should have been caught by the validate function.")
	}

	return *m.Required
}

// SetRequired sets the value of Required
func (m *Arg) SetRequired(v bool) *Arg {
	m.Required = &v
	return m
}

// GetType returns the de-referenced value of Type.
// If the field is nil, the function panics because type is marked as required.
func (m *Arg) GetType() (val string) {
	if m.Type == nil {
		panic("type marked as required but was not set. This should have been caught by the validate function.")
	}

	return *m.Type
}

// SetType sets the value of Type
func (m *Arg) SetType(v string) *Arg {
	m.Type = &v
	return m
}

// GetMin returns the de-referenced value of Min.
// The second return value states whether the field was set.
func (m *Arg) GetMin() (val float64, set bool) {
	if m.Min == nil {
		return
	}

	return *m.Min, true
}

// SetMin sets the value of Min
func (m *Arg) SetMin(v float64) *Arg {
	m.Min = &v
	return m
}

// GetMax returns the de-referenced value of Max.
// The second return value states whether the field was set.
func (m *Arg) GetMax() (val float64, set bool) {
	if m.Max == nil {
		return
	}

	return *m.Max, true
}

// SetMax sets the value of Max
func (m *Arg) SetMax(v float64) *Arg {
	m.Max = &v
	return m
}

// GetOptions returns the de-referenced value of Options.
// The second return value states whether the field was set.
func (m *Arg) GetOptions() (val []*Option, set bool) {
	if m.Options == nil {
		return
	}

	return m.Options, true
}

// SetOptions sets the value of Options
func (m *Arg) SetOptions(v []*Option) *Arg {
	m.Options = v
	return m
}

// Validate returns an error if any of the fields have bad values
func (m *Arg) Validate() error {
	if m.Required == nil {
		return oops.BadRequest("field 'required' is required")
	}
	if m.Type == nil {
		return oops.BadRequest("field 'type' is required")
	}
	if m.Options != nil {
		for _, r := range m.Options {
			if err := r.Validate(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Option is defined in the .def file
type Option struct {
	Value *string `json:"value,omitempty"`
	Name  *string `json:"name,omitempty"`
}

// GetValue returns the de-referenced value of Value.
// If the field is nil, the function panics because value is marked as required.
func (m *Option) GetValue() (val string) {
	if m.Value == nil {
		panic("value marked as required but was not set. This should have been caught by the validate function.")
	}

	return *m.Value
}

// SetValue sets the value of Value
func (m *Option) SetValue(v string) *Option {
	m.Value = &v
	return m
}

// GetName returns the de-referenced value of Name.
// If the field is nil, the function panics because name is marked as required.
func (m *Option) GetName() (val string) {
	if m.Name == nil {
		panic("name marked as required but was not set. This should have been caught by the validate function.")
	}

	return *m.Name
}

// SetName sets the value of Name
func (m *Option) SetName(v string) *Option {
	m.Name = &v
	return m
}

// Validate returns an error if any of the fields have bad values
func (m *Option) Validate() error {
	if m.Value == nil {
		return oops.BadRequest("field 'value' is required")
	}
	if m.Name == nil {
		return oops.BadRequest("field 'name' is required")
	}
	return nil
}

// DeviceStateChangedEvent is defined in the .def file
type DeviceStateChangedEvent struct {
	Header *Header     `json:"header,omitempty"`
	State  interface{} `json:"state,omitempty"`
}

// GetHeader returns the de-referenced value of Header.
// If the field is nil, the function panics because header is marked as required.
func (m *DeviceStateChangedEvent) GetHeader() (val Header) {
	if m.Header == nil {
		panic("header marked as required but was not set. This should have been caught by the validate function.")
	}

	return *m.Header
}

// SetHeader sets the value of Header
func (m *DeviceStateChangedEvent) SetHeader(v Header) *DeviceStateChangedEvent {
	m.Header = &v
	return m
}

// GetState returns the de-referenced value of State.
// If the field is nil, the function panics because state is marked as required.
func (m *DeviceStateChangedEvent) GetState() (val interface{}) {
	if m.State == nil {
		panic("state marked as required but was not set. This should have been caught by the validate function.")
	}

	return m.State
}

// SetState sets the value of State
func (m *DeviceStateChangedEvent) SetState(v interface{}) *DeviceStateChangedEvent {
	m.State = v
	return m
}

// Validate returns an error if any of the fields have bad values
func (m *DeviceStateChangedEvent) Validate() error {
	if err := m.Header.Validate(); err != nil {
		return err
	}

	if m.Header == nil {
		return oops.BadRequest("field 'header' is required")
	}
	if m.State == nil {
		return oops.BadRequest("field 'state' is required")
	}
	return nil
}
